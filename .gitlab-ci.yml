stages:
  - lints
  - build
  - test
  - deploy

# variables:
#   NODE_ENV: production

# Linting stage for both frontend and backend
lints:
  stage: lints
  image: node:24
  before_script:
    - cd frontend && npm ci && cd ..
    - cd backend && npm ci && cd ..
  script:
    # Add or customize the lint commands as appropriate for your setup
    - cd frontend && npx eslint . --ext .js,.vue || true
    - cd backend && npx eslint . --ext .js || true
  allow_failure: true
  only:
    - merge_requests
    - main
  tags: 
    - pevn

# Build frontend and backend
build:
  stage: build
  image: node:24
  before_script:
    - cd frontend && npm ci && cd ..
    - cd backend && npm ci && cd ..
  script:
    - cd frontend && npm run build && cd ..
    # Optionally, build backend if needed
    # - cd backend && npm run devStart --build && cd ..
  artifacts:
    paths:
      - frontend/dist/
  only:
    - merge_requests
    - main
  tags: 
    - pevn

# Run frontend and backend tests
test:
  stage: test
  image: node:24
  services:
    - postgres:15
  variables:
    POSTGRES_DB: patois_test
    POSTGRES_USER: test_user
    POSTGRES_PASSWORD: test_pass
    DATABASE_URL: postgres://test_user:test_pass@postgres:5432/patois_test
  before_script:
    - cd frontend && npm ci && cd ..
    - cd backend && npm ci && cd ..
    - cd backend && npx prisma migrate deploy || true && cd ..
  script:
    # Frontend tests (uses Vitest)
    - cd frontend && npx vitest run --reporter verbose && cd ..
    # Backend tests (uses Jest)
    - cd backend && npm test -- --verbose && cd ..
  only:
    - merge_requests
    - main
  tags: 
    - pevn

# Deploy to production
deploy:
  stage: deploy
  image: docker:latest
  # services:
  #   - docker:dind
  # variables:
  #   DOCKER_HOST: tcp://docker:2375/
  #   DOCKER_TLS_CERTDIR: ""
  script:
    - docker info 
    # Build Docker image (adjust tag as needed)
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    # Login to GitLab Container Registry
    - echo $CI_REGISTRY_PASSWORD | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    # Push image
    - docker push $CI_REGISTRY_IMAGE:latest
    # Optionally, deploy to your server (example with SSH)
    # - ssh user@your-server 'cd /path/to/app && docker-compose pull && docker-compose up -d'
  only:
    - main
  tags: 
    - pevn